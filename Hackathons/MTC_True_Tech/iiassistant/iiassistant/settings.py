"""
Django settings for iiassistant project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # DRF
    'corsheaders', # CORS
    'django.contrib.postgres', # Операции полнотекстового поиска стр.177
    
    'transcription', # Наше приложение 
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # CORS
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'iiassistant.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'iiassistant.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# Создаем пользователя:
# psql 
# CREATE USER admin WITH PASSWORD 'admin';
# Создаем БД с собственником admin:
# CREATE DATABASE admin OWNER admin ENCODING 'UTF8';
# \q
# Создаем миграции
# python manage.py makemigrations
# Мигрируем
# python manage.py migrate
# Загружаем данные из фикстуры iiassistat_data.json в БД
# python manage.py loaddata iiassistant_data.json
# Если фикстуры не занрузятся очистить БД python manage.py flush
# и снова применить миграции
# Настраиваем Поиск по триграммному сходству
# Дополнительные настройки расширений postgresql:
# Установить переменную среды PATH (при необходимости)
# В Windows
# SET PATH=C:\Users\Prepodavatel\AppData\Local\Programs\Python\Python38;C:\Users\Prepodavatel\AppData\Local\Programs\Python\Python38\Scripts;C:\Program Files\PostgreSQL\10\bin;D:\MyProect\iiassistant\bin;
# В Unix или MacOS export PATH=...прописать аналогичные пути...
# psql admin
# CREATE EXTENSION pg_trgm;
# Проверяем установленные расширения
# SELECT * FROM pg_extension WHERE extname = 'pg_trgm';
# Создать суперюзера для доступа к административной панели
# python manage.py createsuperuser
# Username: admin
# Password: admin

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),
        'NAME': os.getenv('DB_NAME'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD')
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

# Статику расположим внутри приложения 'transcription' 
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'transcription', 'static'),
]

# Указание MEDIA_URL для доступа к медиа-файлам через URL
MEDIA_URL = '/media/'

# Путь к папке, в которой будут сохраняться загруженные файлы (например, аудиозаписи)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_CREDENTIALS = True # This allows CORS requests to go in and out

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

CORS_ALLOWED_ORIGINS = [
    "http://95.163.234.106:22",
]