import websockets
import asyncio
import logging

# Настройка логирования
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def listen():
    url = "ws://simple-websocket-server-echo.glitch.me/"
    
    logging.info("Подключение к серверу WebSocket...")
    async with websockets.connect(url) as ws:
        logging.info("Успешно подключено к серверу.")
        
        while True:
            msg = await ws.recv()  # Ожидаем получение сообщения
            logging.info(f"Получено сообщение: {msg}")  # Логируем сообщение

async def main():
    # Создание задачи для прослушивания
    listener_task = asyncio.create_task(listen())
    
    # Здесь вы можете добавить другие задачи параллельно, если необходимо
    await listener_task  # Ожидаем завершения задачи, чтобы программа не завершилась

# Запуск основной функции
asyncio.run(main())


# Основное отличие WebSocket от HTTP заключается в том, как они обрабатывают соединения и взаимодействие между клиентом и сервером. 

# 1. **Модель взаимодействия**:
#    - **HTTP**: Использует модель "запрос-ответ", где клиент и сервер обмениваются данными в виде отдельных запросов. Каждый запрос инициируется клиентом, и сервер отвечает на него, после чего соединение закрывается. Это делает HTTP полудуплексным протоколом, что означает, что данные могут передаваться только в одном направлении в любой момент времени [citation:2][citation:7].
#    - **WebSocket**: Позволяет устанавливать постоянное двунаправленное соединение между клиентом и сервером. После первоначального соединения, которое также использует HTTP для установки, WebSocket поддерживает открытое соединение, позволяя передавать данные в обоих направлениях одновременно без необходимости повторного открытия соединений [citation:1][citation:6].

# 2. **Эффективность**:
#    - С WebSocket передача данных более эффективна, так как нет накладных расходов на открытие и закрытие соединений для каждого обмена сообщениями. Это особенно полезно для приложений, требующих частого обмена сообщениями, таких как чаты или игры [citation:4][citation:9].

# 3. **Применение**:
#    - **HTTP** подходит для загрузки статических ресурсов, таких как веб-страницы и изображения, или выполнения одноразовых запросов к API [citation:3][citation:5].
#    - **WebSocket** идеально подходит для приложений, которые требуют реального времени, таких как уведомления, совместная работа, чаты и игры, где необходимо поддерживать постоянную связь [citation:10].

# Таким образом, выбор между WebSocket и HTTP зависит от конкретных требований приложения и характера взаимодействия между клиентом и сервером.