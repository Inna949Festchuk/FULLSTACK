# Устанавливаем базовый образ Python и Alpine Linux
FROM python:3.12-alpine

# Установка компилятора gcc для Alpine Linux
RUN apk add --no-cache gcc musl-dev

# Устанавливаем рабочую директорию в контейнере
WORKDIR /stocks_products

# Копируем файл requirements.txt локального проекта в WORKDIR контейнера
COPY ./requirements.txt ./requirements.txt

# Устанавливаем зависимости
RUN pip install -r requirements.txt

# Указываем порт, который будет слушать сервер
EXPOSE 8000

# Docker кэширует слои, чтобы ускорить сборку образов. 
# Если файл requirements.txt не изменился, Docker может использовать кэш для установки зависимостей, 
# что значительно ускоряет процесс сборки. Если вы сначала скопируете все файлы проекта, 
# то при каждом изменении любого из этих файлов Docker будет вынужден повторно запускать 
# все последующие команды, включая установку зависимостей.

# Если порядок будет таким
# COPY ./requirements.txt ./requirements.txt
# RUN pip install -r requirements.txt
# COPY . .
# То, если изменится только код вашего проекта, но requirements.txt останется прежним, 
# Docker использует кэш для установки зависимостей, и вы получите значительно быстрее сборку образа.

# Копируем файлы локального проекта в WORKDIR контейнера
COPY . .

# Команда на запуск сервера
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
