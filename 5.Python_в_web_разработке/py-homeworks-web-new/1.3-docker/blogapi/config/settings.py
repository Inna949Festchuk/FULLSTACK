"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os

from pathlib import Path
from dotenv import load_dotenv

load_dotenv('new.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# # !!!ВКЛЮЧИ НА WINDOWS10!!! - - - - - - - 
# if os.name == 'nt':
#     VIRTUAL_ENV_BASE = os.environ['VIRTUAL_ENV']
#     os.environ['PATH'] = os.path.join(VIRTUAL_ENV_BASE, r'.\Lib\site-packages\osgeo') + ';' + os.environ['PATH']
#     os.environ['PROJ_LIB'] = os.path.join(VIRTUAL_ENV_BASE, r'.\Lib\site-packages\osgeo\data\proj') + ';' + os.environ['PATH']
# # - - - - - - - - - - - - - - - - - - - - 


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = [
    os.getenv('ALLOWED_HOSTS')
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # new
    'rest_framework', # API
    'rest_framework.authtoken', # new приложение, которое генерирует токены на сервере.
    'allauth', # Регистрация новых пользователей
    'allauth.account', # Регистрация новых пользователей
    'allauth.socialaccount', # Регистрация новых пользователей
    'dj_rest_auth', # приложение добавляющее конечные точки API для входа, выхода и сброса пароля
    'dj_rest_auth.registration', # Регистрация новых пользователей
    'posts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),
        'NAME': os.path.join(f"{BASE_DIR}", f"{os.getenv('DB_NAME')}")
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': os.getenv('DB_ENGINE'),
#         'NAME': os.getenv('DB_NAME'),
#         'USER': os.getenv('DB_USER'),
#         'PASSWORD': os.getenv('DB_PASSWORD'),
#         'HOST': os.getenv('DB_HOST'),
#         'PORT': os.getenv('DB_PORT')
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# new
# REST_FRAMEWORK={
#     'DEFAULT_PERMISSION_CLASSES':[
#         'rest_framework.permissions.AllowAny',
#     ]
# }

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES':[
        'rest_framework.permissions.IsAuthenticated',], # new 
    'DEFAULT_AUTHENTICATION_CLASSES': [ # new Default Authentication
        'rest_framework.authentication.SessionAuthentication', 
        # 'rest_framework.authentication.BasicAuthentication', 
        'rest_framework.authentication.TokenAuthentication', 
    ]
}

# Авторизация
# Разрешения (PERMISSION) на уровне проекта:

# AllowAny - любой пользователь, аутентифицированный или нет,
# имеет полный доступ
# IsAuthenticated - доступ имеют только аутентифицированные,
# зарегистрированные пользователи
# IsAdminUser - доступ имеют только администраторы/
# суперпользователи
# IsAuthenticatedOrReadOnly - неавторизованные пользователи могут
# просматривать любую страницу, но только авторизованные
# пользователи имеют права на запись, редактирование или удаление.

# Аутентификация
# Базовая аутентификация (BasicAuthentication). 
# 1. Клиент делает HTTP-запрос
# 2. Сервер отвечает HTTP-ответом, содержащим код состояния 401
# (неавторизованный) и WWW-Authenticate HTTP заголовок с подробной
# информацией о том, как авторизоваться
# 3. Клиент отправляет учетные данные обратно через HTTP-заголовок
# Authorization (это незашифрованная base64 кодированная версия <username>:<password>).
# 4. Сервер проверяет учетные данные и отвечает либо кодом
# состояния 200 OK, либо 403 Forbidden.(Запрещено)
# После одобрения клиент отправляет все последующие запросы с
# данными авторизационного HTTP-заголовка.


# Аутентификация по сеансам(Session Authentication). На высоком уровне
# клиент аутентифицируется с помощью своих учетных данных (имя
# пользователя/пароль), а затем получает от сервера идентификатор
# сессии, который хранится в виде cookie. Этот идентификатор сессии затем
# передается в заголовке каждого будущего HTTP-запроса.
# Когда идентификатор сессии передан, сервер использует его для поиска
# объекта сессии, содержащего всю доступн

# 1. Пользователь вводит свои учетные данные для входа в систему
# (обычно имя пользователя/пароль).
# 2. Сервер проверяет правильность учетных данных и генерирует объект
# сессии, который затем сохраняется в базе данных.
# 3. Сервер посылает клиенту идентификатор сессии, а не сам объект
# сессии, который хранится в браузере в виде cookie.
# 4. При всех последующих запросах идентификатор сессии включается в
# HTTP-заголовок, и, если он подтвержден базой данных, запрос
# выполняется.
# 5. Как только пользователь выходит из приложения, идентификатор
# сессии уничтожается как клиентом, так и сервером.
# 6. Если пользователь снова входит в приложение, генерируется новый
# идентификатор сессии, который сохраняется на клиенте в виде cookie.


# Аутентификация на основе токенов TokenAuthentication: как только
# клиент отправляет на сервер начальные учетные данные пользователя,
# генерируется уникальный токен, который затем сохраняется клиентом в
# виде cookie или в локальном хранилище. Затем этот токен передается в
# заголовке каждого входящего HTTP-запроса, и сервер
# использует его для проверки подлинности пользователя. Сам сервер не
# хранит данные о пользователе, только о том, действителен ли токен или
# нет.

# Регистрация новых пользователей

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # new
SITE_ID = 1 # new

# необходима, поскольку по умолчанию при
# регистрации нового пользователя будет отправляться письмо с просьбой
# подтвердить учетную запись. Вместо того, чтобы настраивать почтовый
# сервер, мы будем выводить письма в консоль с помощью параметра
# console.EmailBackend.

# SITE_ID является частью встроенного фреймворка Django "sites", который
# представляет собой способ размещения нескольких сайтов из одного
# проекта Django. Очевидно, что здесь мы работаем только с одним сайтом,
# но django-allauth использует фреймворк sites, поэтому мы должны указать
# параметр по умолчанию.